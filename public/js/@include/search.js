function AddAlertForFunny(type) {
  switch (type) {
    case "partners":
      return `<div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Partners</h4>
        <p>Partners are crucial contributors to our community, playing a vital role in the continued growth of the Vtuber Wiki. Their support and collaboration help us enhance the quality and reach of our resources.</p>
        <p>If you are interested in becoming a partner, please contact us at <a href="mailto:withervt@gmail.com" target="_blank">withervt@gmail.com</a>.</p>
        <hr>
        <p class="mb-0"><i>This text was generated by a ALPHA version of our AI.</i></p>
      </div>`;
    case "software":
      return `<div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Software</h4>
        <p>Software refers to the diverse array of tools available to Vtuber creators, facilitating content creation and community interaction. These tools range in quality, functionality, and usability, providing creators with the means to express their unique personas and engage with their audience.</p>
        <hr>
        <p class="mb-0"><i>This text was generated by a ALPHA version of our AI.</i></p>
        </div>`;
    case "vtubers":
      return `<div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Vtubers</h4>
        <p>Discover a myriad of Vtubers featured in our Wiki. Each Vtuber brings a distinct persona and content style to the community. Explore their profiles to gain insights into their backgrounds, content genres, and contributions to the vibrant world of Vtubing.</p>
        <hr>
        <p class="mb-0"><i>This text was generated by a ALPHA version of our AI.</i></p>
        </div>`;
    case "guides":
      return `<div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Guides</h4>
        <p>Our comprehensive guides serve as valuable resources for both novice and experienced members of the Vtuber community. Covering a wide range of topics, these guides provide insights, tips, and best practices to help creators navigate the intricacies of Vtubing and content creation.</p>
        <hr>
        <p class="mb-0"><i>This text was generated by a ALPHA version of our AI.</i></p>
        </div>`;
    case "blogs":
      return `<div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Blogs</h4>
        <p>Explore thought-provoking blogs that delve into various aspects of the Vtuber landscape. These blogs offer perspectives, in-depth analyses, and stay up-to-date with the latest trends in the world of Vtubing. Stay informed and engaged with the dynamic Vtuber community through our curated blog content.</p>
        <hr>
        <p class="mb-0"><i>This text was generated by a ALPHA version of our AI.</i></p>
        </div>`;
    default:
      return ""; // Default case returns an empty string for unsupported types.
  }
}


function AddAl(e) {
  document.getElementById("res_banner").innerHTML = e;
}


function TruncateString(str, num) {
    if (str.length <= num) {
      return str;
    }
    return str.slice(0, num) + "...";
  }

  const rules = ["vtubers:", "partners:", "software:", "guides:", "blogs:"];

  const errorMessages = {
    NO_RESULTS: `<div class="search-result no-results">
  <p class="no-results-message">No results found for <strong>%{query}</strong></p>
</div>`,
  };

  async function search() {
    const searchInput = document.getElementById("searchInput");
    const searchQuery = searchInput.value;
    const resultsContainer = document.getElementById("results");

    // Clear the results cleanly

    resultsContainer.innerHTML = "";

    const reqData = await fetch("/api/search/q").then((res) => res.json());
    const results = reqData.data;

    let noResultsFound = true; // Flag to check if no results are found in any iteration
    const uniqueResults = new Set(); // Use a Set to store unique results

    // Check if the search query is a rule
    for (const rule of rules) {
      if (searchQuery.startsWith(rule)) {
        const obj = results[rule.replace(":", "")];
        AddAl(AddAlertForFunny(rule.replace(":", "")));
        if (Array.isArray(obj)) {
          const regex = new RegExp(
            searchQuery.replace(rule, "").trim(),
            "gi"
          );
          const filtered = obj.filter((item) => item.name.match(regex));

          if (filtered.length > 0) {
            // Add unique results to the Set
            filtered.forEach((item) => uniqueResults.add(item.link));
            noResultsFound = false; // Results found, set the flag to false
          }
        }
      } else {
        const regex = new RegExp(searchQuery, "gi");

        for (const key in results) {
          const obj = results[key];

          if (Array.isArray(obj)) {
            const filtered = obj.filter((item) => item.name.match(regex));

            if (filtered.length > 0) {
              // Add unique results to the Set
              filtered.forEach((item) => uniqueResults.add(item.link));
              noResultsFound = false; // Results found, set the flag to false
            }
          }
        }
      }
    }

    // If no results found in any iteration, show the "No results found" message
    if (noResultsFound) {
      resultsContainer.innerHTML = errorMessages.NO_RESULTS.replace(
        "%{query}",
        `${searchQuery}`
      );
    } else {
      // Convert Set to an array and pass it to AddData
      const uniqueResultsArray = Array.from(uniqueResults).map((link) => {
        // Find the corresponding item in the results data
        for (const key in results) {
          const obj = results[key];
          const foundItem = obj.find((item) => item.link === link);
          if (foundItem) {
            return foundItem;
          }
        }
      });

      // Add unique results outside the loop
      window.location.hash = searchQuery.replace(/\s/g, "+");
      AddSkeletons(uniqueResultsArray.length);
      setTimeout(() => {
        document.getElementById("results").innerHTML = "";
        AddData(uniqueResultsArray);
        document.getElementById("res_banner").scrollIntoView();
      }, 1000);
    }
  }

  function FormatDate(date) {
    // Make it like: December 29, 2023
    const d = new Date(date);
    const month = d.toLocaleString("default", { month: "long" });
    const day = d.getDate();
    const year = d.getFullYear();
    return `${month} ${day}, ${year}`;
  }

  function CreateSocials(links) {
    return Array.isArray(links)
      ? links.map((link) => {
          return {
            url: link,
            iconUppercase:
              link
                .split("https://")
                .pop()
                .split(".")[0]
                .charAt(0)
                .toUpperCase() +
              link.split("https://").pop().split(".")[0].slice(1),
          };
        })
      : [];
  }

  function AddSkeletons(length) {
    const resultsContainer = document.getElementById("results");
    const skeletonTemplate = `<div class="skeleton-loader">
    <div class="skeleton-favicon"></div>
    <div class="skeleton-info">
      <div class="skeleton-name"></div>
      <div class="skeleton-link"></div>
      <div class="skeleton-description"></div>
      <div class="skeleton-meta">
        <div class="skeleton-date"></div>
      </div>
      <div class="skeleton-links">
        <a href="#" class="skeleton-link"></a>
        <a href="#" class="skeleton-link"></a>
        <a href="#" class="skeleton-link"></a>
      </div>
    </div>
    <div class="skeleton-cloud"></div>
  </div>`;

    for (let i = 0; i < length; i++) {
      resultsContainer.innerHTML += skeletonTemplate;
    }
  }

  const showLink = new URLSearchParams(window.location.search).get("sl") === "";

  function AddData(data) {
    const resultsContainer = document.getElementById("results");

    if (data.length === 0) {
      const template = errorMessages.NO_RESULTS.replace(
        "%{query}",
        searchInput.value
      );

      if (resultsContainer.innerHTML.trim() === "") {
        resultsContainer.innerHTML = template;
      }

      return;
    }

    data.forEach((item) => {
      const template = `<div class="search-result" style="border: 1px solid ${
        item.border_color ? item.border_color : "#7289da"
      };">
<img src="${item.image || "/images/logo.png"}" loading="lazy" alt="Favicon" class="favicon">
<div class="result-info">
  <h3 class="result-name"><a href="${item.link}" target="_blank">${
    item.name || "Unknown"
  }</a></h3>
  <p class="result-link">${showLink ? item.link : item.link.replace("https://vtubers.wiki", "~")}</p>
  <p class="result-description">${item.description || "Unknown"}</p>
  <div class="result-meta">
    <span class="result-date">${FormatDate(item.date)}</span>
    <span class="tag-cloud">${item.category}</span>
  </div>
</div>
</div>`;

      resultsContainer.innerHTML += template;
    });
  }

  function AutoFill() {
    const searchInput = document.getElementById("searchInput");
    const searchQuery = window.location.hash.replace("#", "");
    const removeWhiteSpace =
      new URLSearchParams(window.location.search).get("rm") === "";

    if (searchQuery) {
      searchInput.value = searchQuery.replace(/\+/g, " ");
      if (removeWhiteSpace) {
        searchInput.value = searchInput.value.replace(/\s/g, "");
      }
    } else {
      searchInput.value = "";
    }
  }

  document.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      if (document.activeElement.id === "searchInput") {
        search();
      } else {
        document.getElementById("searchInput").focus();
      }
    }
  });

  function FormatName(name) {
    // Make it from (vtubers:) to Vtubers
    return name.replace(":", "").charAt(0).toUpperCase() + name.replace(":", "").slice(1);
  }

  function AddQuickAccess() {
    rules.forEach((rule) => {
      const name = FormatName(rule);
      document.getElementById("search_quick").innerHTML += `
      <li><a class="dropdown-item quick-item" data-query=${rule} href="#">Add ${name} query</a></li>
      `
    });
  }

  function RegisterQuickAccess() {
    const quickItems = document.getElementsByClassName("quick-item");

    for (let i = 0; i < quickItems.length; i++) {
      quickItems[i].addEventListener("click", function (e) {
        e.preventDefault();
        // Get the data-query attribute
        const query = this.getAttribute("data-query");
        document.getElementById("searchInput").value = query;
        window.location.hash = query;
        document.getElementById("searchInput").focus();
      });
    }
  }
  

  window.addEventListener("load", () => {
    AddQuickAccess();
    AutoFill();
    RegisterQuickAccess();
    if (window.location.hash) {
      if (window.location.hash.replace("#", "") !== "") {
        search();
      }
    }
  });